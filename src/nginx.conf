http {
  resolver  127.0.0.1;
  resolver_timeout 15s;

  upstream simple_cache {
    server 127.0.0.1:5000;
  }
  proxy_cache_path /var/cache/nginx_ram_cache levels=1:2 use_temp_path=off keys_zone=ngx_ram_cache:4096m max_size=61440m inactive=90d;
  proxy_cache_valid 200 30d;
  proxy_cache_valid 303 307 30s;
  proxy_cache_valid 400 401 403 406 415 1m;
  proxy_cache_valid 404 10s;

  # Access log
    log_format request '$remote_addr [$time_iso8601] $http_host '
                       '"$request" $status $bytes_sent $body_bytes_sent $request_time '
                       '$upstream_connect_time $upstream_header_time $upstream_response_time '
                       '$upstream_bytes_received $upstream_bytes_sent $upstream_addr $upstream_http_disk_id '
                       '"$http_referer" "$http_user_agent" '
                       '"$gzip_ratio" "$request_completion" "$upstream_cache_status" "$http_request_id"';

    # access_log /var/log/nginx/upstream.ram.access.log request;
    access_log /var/log/nginx/upstream.ram.access.log.gz request gzip=1;

    server {
        listen 127.0.0.1:80;

        set_by_lua_block $cache_key {
              local function has_value (tab, val)
                  for index, value in ipairs(tab) do
                      if value == val then
                          return true
                      end
                  end

                  return false
              end

              local uri = ngx.var.uri
              local host = ngx.var.host
              local request_uri = ngx.var.request_uri



              local cache_key = host .. request_uri

              if has_value(domains, host) then
                  cache_key = host .. uri
              end

              return cache_key

        }

        location / {
            proxy_cache ngx_ram_cache;
            proxy_cache_key $cache_key;
            proxy_set_header Host $host;
            proxy_ssl_name $host;
            proxy_ssl_server_name on;
            proxy_pass http://simple_cache;
        }
    }
}